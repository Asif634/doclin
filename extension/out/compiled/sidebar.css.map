{
  "version": 3,
  "file": "sidebar.css",
  "sources": [
    "Threads.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar _a;\nimport { onMount } from \"svelte\";\n;\nexport let user;\nexport let accessToken;\nlet quillEditor;\nlet threadMessage = ((_a = tsvscode.getState()) === null || _a === void 0 ? void 0 : _a.threadMessage) || \"\";\nlet threads = [];\nfunction postThreadMessage(t) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield fetch(`${apiBaseUrl}/threads`, {\n            method: \"POST\",\n            body: JSON.stringify({\n                message: t,\n            }),\n            headers: {\n                \"content-type\": \"application/json\",\n                authorization: `Bearer ${accessToken}`,\n            },\n        });\n        const { thread } = yield response.json();\n        threads = [thread, ...threads];\n    });\n}\nfunction populateThreadMessageField(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // const editorContent = quill.root.innerHTML;\n        threadMessage += message;\n        quillEditor.setText(threadMessage);\n        quillEditor.formatLine(0, threadMessage.length, 'code-block', true);\n        threadMessage = \"\";\n        tsvscode.setState(Object.assign(Object.assign({}, tsvscode.getState()), { threadMessage }));\n    });\n}\nfunction handleThreadMessageUpdate() {\n    // threadMessage = quill.get;\n    tsvscode.setState(Object.assign(Object.assign({}, tsvscode.getState()), { threadMessage }));\n}\nfunction submitThreadMessage() {\n    return __awaiter(this, void 0, void 0, function* () {\n        threadMessage = quillEditor.root.innerHTML;\n        console.log(threadMessage);\n        postThreadMessage(threadMessage);\n        threadMessage = \"\";\n        quillEditor.setText(threadMessage);\n        tsvscode.setState(Object.assign(Object.assign({}, tsvscode.getState()), { threadMessage }));\n    });\n}\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    window.addEventListener(\"message\", (event) => __awaiter(void 0, void 0, void 0, function* () {\n        const message = event.data;\n        switch (message.type) {\n            case \"populate-thread-message\":\n                populateThreadMessageField(message.value);\n                break;\n        }\n    }));\n    quillEditor = new Quill('#textEditor', {\n        modules: {\n            toolbar: [\n                ['bold', 'italic', 'underline', 'strike'],\n                ['link', 'blockquote', 'code-block', 'image'],\n                [{ list: 'ordered' }, { list: 'bullet' }],\n                [{ color: [] }, { background: [] }]\n            ]\n        },\n        theme: 'snow'\n    });\n    quillEditor.theme.modules.toolbar.container.style.background = '#f1f1f1';\n    quillEditor.theme.modules.toolbar.container.style.border = 'none';\n    const response = yield fetch(`${apiBaseUrl}/threads`, {\n        headers: {\n            authorization: `Bearer ${accessToken}`,\n        },\n    });\n    const payload = yield response.json();\n    threads = payload.threads;\n}));\n</script>\n\n<style>\n    #textEditor{\n        width: 100%;\n        height: 150px;\n        resize: both; \n        overflow: auto;\n    }\n\n    .threadContainer{\n        background-color: rgb(46, 48, 48);\n        padding: 0.5rem;\n        gap: 0.25;\n        border-radius: 5px;\n        border: 2px;\n        margin-bottom: 0.5rem;\n    }\n    .editContainer {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    #editButton {\n        width: 30px;\n        \n    }\n</style>\n\n<div>Hello: {user.name}</div>\n\n<form\n    on:submit|preventDefault={submitThreadMessage}>\n    <div id=\"textEditor\"></div>\n    <button on:click|preventDefault={submitThreadMessage}>Submit</button>\n</form>\n\n<div id='viewer'>\n    {#each threads as thread (thread.id)}\n    <div class='threadContainer'>\n        <div class='editContainer'>\n            {user.name}\n            <button id='editButton'>Edit</button>\n        </div>\n        <div>\n            {@html thread.message}\n        </div> \n    </div>\n    {/each}\n</div>\n"
  ],
  "names": [],
  "mappings": "AA0FI,0BAAW,CAAC,AACR,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,IAAI,AAClB,CAAC,AAED,+BAAgB,CAAC,AACb,gBAAgB,CAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CACjC,OAAO,CAAE,MAAM,CACf,GAAG,CAAE,IAAI,CACT,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,GAAG,CACX,aAAa,CAAE,MAAM,AACzB,CAAC,AACD,cAAc,eAAC,CAAC,AACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,AACvB,CAAC,AAED,WAAW,eAAC,CAAC,AACT,KAAK,CAAE,IAAI,AAEf,CAAC"
}